import requests
import csv
import json
import xmltodict


def xmlToJson(xml_str):
    try:
        json_dict = xmltodict.parse(xml_str, encoding='utf-8')
        json_str = json.dumps(json_dict, indent=2)
        return json_str
    except:
        pass


# 蓝色第一类，橙色第二类，绿色第三类，红色第四类，紫色第五类
cluster_res = [
    [6, 10, 12, 19, 29, 30, 31, 33, 37, 41, 45, 47, 53, 54, 58, 66, 68, 75, 82, 84, 86, 89, 100, 106, 109, 118, 120,
     124, 126, 129, 141, 144, 145, 146, 147, 150, 158, 164, 177, 186, 187, 189, 191, 194, 197, 199, 204, 205, 210, 212,
     223, 229, 232, 234, 243, 244, 247, 248, 249, 250, 251, 254, 256, 261, 262, 263, 264, 265, 270, 271, 272, 275, 281,
     283, 284, 289, 292, 296, 298, 301, 302, 304, 305, 309, 312, 314, 318, 323, 324, 325, 335, 345, 347, 348, 352, 353,
     356, 359, 360, 363, 366, 367, 370, 375, 384, 387, 388, 397, 399, 400, 405, 406, 407, 408, 409, 410, 412, 418, 423,
     424, 427, 430, 433, 434, 435, 436, 437, 438, 439, 444, 445, 454, 456, 460, 461, 462, 463, 464, 470, 471, 474, 475,
     480, 484, 485, 486, 489, 490, 493, 495, 497, 502, 506, 508, 509, 512, 516, 517, 522, 524, 534, 536, 538, 541, 542,
     543, 544, 545, 548, 551, 552, 555, 557, 558, 559, 560, 562, 564, 565, 566, 567, 568, 569, 571, 572, 574, 578, 581,
     584, 585, 586, 588, 589, 590, 592, 593, 594, 597, 599, 603, 605, 606, 610, 612, 614, 615, 623, 626, 627, 628, 629,
     634, 640, 642, 645, 649, 650, 651, 652, 653, 657, 659, 662, 663, 665, 666, 668, 669, 671, 672, 673, 674, 676, 678,
     679, 681, 684, 686, 688, 690, 693, 694, 695, 696, 697, 698, 701, 702, 704, 707, 710, 713, 718, 722, 723, 724, 725,
     728, 730, 732, 734, 741, 742, 745, 747, 750, 751, 752, 753, 754, 755, 756, 759, 761, 763, 764, 765, 766, 768, 769,
     770, 772, 773, 774, 776, 777, 780, 782, 785, 789, 790, 793, 794, 796, 798, 799, 800, 801, 804, 806, 808, 809, 810,
     813, 815, 816, 817, 819, 820, 826, 829, 832, 834, 836, 838, 839, 840, 845, 846, 853, 856, 858, 865, 867, 868, 873,
     874, 878, 881, 882, 885, 891, 893, 903, 913, 914, 915, 917, 918, 925, 929, 930, 939, 945, 946, 948, 957, 958, 959,
     960, 961, 963, 972, 973, 974, 975],
    [0, 24, 73, 81, 87, 90, 125, 130, 138, 142, 143, 167, 246, 258, 269, 529, 531, 549, 554, 556, 580, 608],
    [3, 8, 21, 23, 46, 60, 91, 131, 188, 233, 257, 273, 278, 293, 346, 527, 528, 530, 547, 561, 579, 583, 620, 787, 954,
     969],
    [1, 2, 4, 9, 11, 14, 15, 16, 17, 20, 22, 25, 32, 34, 35, 36, 39, 40, 43, 48, 49, 50, 51, 52, 56, 59, 61, 62, 63, 64,
     65, 67, 70, 71, 72, 74, 77, 79, 83, 88, 93, 94, 95, 96, 97, 101, 102, 108, 110, 112, 115, 116, 119, 123, 128, 132,
     133, 134, 136, 137, 139, 153, 156, 170, 171, 173, 174, 175, 178, 180, 182, 183, 190, 192, 193, 195, 196, 198, 200,
     206, 209, 211, 213, 215, 217, 218, 220, 222, 224, 225, 226, 227, 228, 230, 231, 236, 240, 241, 242, 245, 252, 260,
     277, 279, 282, 285, 288, 290, 291, 299, 306, 310, 313, 317, 319, 320, 322, 326, 328, 330, 331, 333, 336, 337, 339,
     342, 344, 350, 351, 354, 364, 369, 371, 372, 382, 383, 386, 389, 392, 396, 398, 403, 413, 414, 417, 419, 425, 428,
     429, 432, 442, 446, 447, 450, 452, 467, 472, 473, 476, 477, 478, 483, 487, 491, 492, 501, 503, 505, 513, 514, 515,
     519, 521, 525, 532, 539, 563, 575, 576, 577, 617, 618, 624, 630, 631, 633, 639, 644, 647, 677, 683, 689, 692, 700,
     706, 709, 714, 715, 726, 743, 744, 746, 767, 807, 818, 830, 831, 833, 842, 843, 859, 871, 872, 880, 883, 884, 889,
     892, 894, 898, 899, 900, 901, 902, 904, 905, 907, 910, 919, 921, 924, 934, 935, 936, 937, 949, 950, 951, 964, 965,
     966],
    [5, 7, 13, 18, 26, 27, 28, 38, 42, 44, 55, 57, 69, 76, 78, 80, 85, 92, 98, 99, 103, 104, 105, 107, 111, 113, 114,
     117, 121, 122, 127, 135, 140, 148, 149, 151, 152, 154, 155, 157, 159, 160, 161, 162, 163, 165, 166, 168, 169, 172,
     176, 179, 181, 184, 185, 201, 202, 203, 207, 208, 214, 216, 219, 221, 235, 237, 238, 239, 253, 255, 259, 266, 267,
     268, 274, 276, 280, 286, 287, 294, 295, 297, 300, 303, 307, 308, 311, 315, 316, 321, 327, 329, 332, 334, 338, 340,
     341, 343, 349, 355, 357, 358, 361, 362, 365, 368, 373, 374, 376, 377, 378, 379, 380, 381, 385, 390, 391, 393, 394,
     395, 401, 402, 404, 411, 415, 416, 420, 421, 422, 426, 431, 440, 441, 443, 448, 449, 451, 453, 455, 457, 458, 459,
     465, 466, 468, 469, 479, 481, 482, 488, 494, 496, 498, 499, 500, 504, 507, 510, 511, 518, 520, 523, 526, 533, 535,
     537, 540, 546, 550, 553, 570, 573, 582, 587, 591, 595, 596, 598, 600, 601, 602, 604, 607, 609, 611, 613, 616, 619,
     621, 622, 625, 632, 635, 636, 637, 638, 641, 643, 646, 648, 654, 655, 656, 658, 660, 661, 664, 667, 670, 675, 680,
     682, 685, 687, 691, 699, 703, 705, 708, 711, 712, 716, 717, 719, 720, 721, 727, 729, 731, 733, 735, 736, 737, 738,
     739, 740, 748, 749, 757, 758, 760, 762, 771, 775, 778, 779, 781, 783, 784, 786, 788, 791, 792, 795, 797, 802, 803,
     805, 811, 812, 814, 821, 822, 823, 824, 825, 827, 828, 835, 837, 841, 844, 847, 848, 849, 850, 851, 852, 854, 855,
     857, 860, 861, 862, 863, 864, 866, 869, 870, 875, 876, 877, 879, 886, 887, 888, 890, 895, 896, 897, 906, 908, 909,
     911, 912, 916, 920, 922, 923, 926, 927, 928, 931, 932, 933, 938, 940, 941, 942, 943, 944, 947, 952, 953, 955, 956,
     962, 967, 968, 970, 971]]

res_dict = {}
for i in range(len(cluster_res)):
    for item in cluster_res[i]:
        res_dict[item] = i + 1
total_latitude, total_longitude = [], []
scores, mean_price, comment = [], [], []
names = []
cluster = []
with open("CleanedData.csv", encoding="utf8") as f:
    reader = csv.reader(f)
    next(reader)
    i = 0
    for row in reader:
        api = 'https://restapi.amap.com/v3/geocode/geo?address=' + row[
            2] + "&output=XML&key=9013e06e0781b4f712e29a674d2c0d2f"
        response = requests.get(api)
        xml_str = response.text
        json_obj = xmlToJson(xml_str)
        try:
            latitude, longitude = json.loads(json_obj)['response']['geocodes']['geocode']['location'].split(",")
            total_latitude.append(latitude)
            total_longitude.append(longitude)
        except KeyError:
            i += 1
            continue
        cluster.append(res_dict[i])
        names.append(row[0])
        scores.append(row[1])
        mean_price.append(row[3])
        comment.append(row[4])
        i += 1

with open("finalData.csv", 'w', encoding='utf-8-sig', newline="") as f:
    writer = csv.writer(f)
    writer.writerow(['names', 'scores', 'longitude', 'latitude', 'mean_price', 'comment', "cluster"])
    for i in range(len(names)):
        writer.writerow(
            [names[i], scores[i], total_latitude[i], total_longitude[i], mean_price[i], comment[i], cluster[i]])
